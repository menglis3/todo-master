{"version":3,"sources":["src/app.js","src/auth-config.js","src/environment.js","src/main.js","src/modules/home.js","src/modules/list.js","src/resources/index.js","src/resources/data/data-services.js","src/resources/data/todos.js","src/resources/data/users.js"],"names":["App","configureRouter","config","router","addPipelineStep","map","route","moduleId","name","auth","authConfig","baseUrl","loginUrl","tokenName","authHeader","authToken","logoutRedirect","debug","testing","configure","window","regeneratorRuntime","aurelia","use","standardConfiguration","plugin","baseConfig","feature","developmentLogging","start","then","setRoot","Home","users","message","showLogin","loginError","login","email","password","sessionStorage","setItem","JSON","stringify","response","user","navigate","catch","console","log","error","showRegister","firstName","lastName","registerError","save","serverResponse","List","todos","parse","getItem","showList","title","editTodoForm","showCompleted","priorities","activate","getUserTodos","_id","createTodo","todoObj","todo","description","dateDue","Date","userId","priority","saveTodo","alert","logout","removeItem","DataServices","http","httpClient","BASE_URL","withBaseUrl","withDefaults","credentials","headers","withInterceptor","request","method","url","status","get","fetch","json","data","post","content","body","object","put","delete","ToDos","TODO_SERVICE","Users","USER_SERVICE"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {AuthorizeStep} from 'aurelia-auth';\n\n\nexport class App {\n\tconfigureRouter(config, router) {\n\t\tthis.router = router;\n\t\tconfig.addPipelineStep('authorize', AuthorizeStep); \n\t\tconfig.map([\n\t{\t \nroute: ['', 'home'],\nmoduleId: './modules/home',\nname: 'Home' \n},\n{\nroute: 'list',\nmoduleId: './modules/list',\nname: 'List',\nauth: true \n}\n]);\n}\n}\n","var authConfig = {\r\n    baseUrl: \"http://localhost:5000/api\",\r\n    loginUrl: '/users/login',\r\n    tokenName: 'token',\r\n    authHeader: 'Authorization',\r\n    authToken: '',\r\n    logoutRedirect: '#/home'\r\n  }\r\n  \r\n  export default authConfig;\r\n  ","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport config from './auth-config';\nimport regeneratorRuntime from 'regenerator-runtime';\nwindow.regeneratorRuntime = regeneratorRuntime;\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .plugin('aurelia-auth', (baseConfig)=>{\n      baseConfig.configure(config);\n })\n    .feature('resources');\n \n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject} from 'aurelia-framework'; //import modules into home object\nimport {Router} from 'aurelia-router'; //The router we configured\nimport {Users} from '../resources/data/users';\nimport {AuthService} from 'aurelia-auth';\n\n\n@inject(Router, Users, AuthService)\n\nexport class Home {\n    constructor(router, users, auth){\n        this.router = router;\n        this.users = users;\n        this.message = \"Home\";\n        this.showLogin = true;\n        this.auth = auth;\n        this.loginError = '';\n    }\n\n    \n    login(){\n        return this.auth.login(this.email, this.password)\n        .then(response => {\n      sessionStorage.setItem(\"user\", JSON.stringify(response.user));\n      this.loginError = \"\";\n      this.router.navigate('list');\n    })\n        .catch(error => {\n        console.log(error);\n        this.loginError = \"Invalid credentials.\";\n        });\n        };\n\n\n    showRegister(){\n        this.user = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\"\n        }\n            this.registerError = \"\";\n        this.showLogin = false;\n    }\n\n      async save() {\n              let serverResponse = await this.users.save(this.user);\n              if (!serverResponse.error) {\n                this.showLogin = true;\n              } else {\n                this.registerError = \"There was a problem registering the user.\"\n              }\n        }\n        \n\n}\n","import {inject} from 'aurelia-framework';\nimport {Router} from 'aurelia-router';\nimport {AuthService} from 'aurelia-auth';\nimport {ToDos} from '../resources/data/todos';\n\n    \n    @inject(Router, AuthService, ToDos)\n    export class List {\n      constructor(router, auth, todos) {\n        this.router = router;\n        this.todos=todos;\n        this.auth=auth;\n        this.message = 'List';\n        this.user = JSON.parse(sessionStorage.getItem('user'));\n        this.showList = true;\n        this.title = \"Mouang has things to do!\"\n        this.editTodoForm = false;\n        this.showCompleted = false;\n        this.priorities = ['Low', 'Medium', 'High', 'Critical'];\n      \n      }\n    \n      async activate(){\n        await this.todos.getUserTodos(this.user._id);\n    }\n\n      createTodo(){ \n        this.todoObj = {\n            todo: \"\",\n            description: \"\",\n            dateDue: new Date(),\n             userId: this.user._id,\n            priority: this.priorities[0]\n        }\n        this.showList = false;      \n    }\n\n    async saveTodo(){\n        if(this.todoObj){       \n            let response = await this.todos.save(this.todoObj);\n            if(response.error){\n                alert(\"There was an error creating the ToDo\");\n            } else {\n                                         \n            }\n            this.showList = true;\n        }\n    }\n    \n  \n\n    logout(){\n          this.router.navigate('home');\n      }\n    \n\n    logout(){\n        sessionStorage.removeItem('user');\n        this.auth.logout();\n    }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import { inject } from 'aurelia-framework';\nimport {HttpClient, json} from 'aurelia-fetch-client';\n\n@inject(HttpClient)\nexport class DataServices {\n\n\tconstructor(http) {\n        this.httpClient = http;\n        \n        this.BASE_URL = \"http://localhost:5000/api/\";\n        \n        this.httpClient.configure(config => {\n            config\n                .withBaseUrl(this.BASE_URL)\n                .withDefaults({\n                credentials: 'same-origin',\n                headers: { \n                    'Accept': 'application/json',\n                    'X-Requested-With': 'Fetch' //using the aurelia fetch protocol\n                }\n                })\n                .withInterceptor({\n                request(request) { //debug things, whether requests are being sent or not\n                    console.log(`Requesting ${request.method} ${request.url}`);\n                    return request;\n                },\n                response(response) {\n                    console.log(`Received ${response.status} ${response.url}`);\n                    return response;\n                }\n                });\n            });\n    \n\n\t}\n\n    // Get\n    get(url) {\n\t\treturn this.httpClient.fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\treturn data;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn error;\n\t\t\t});\n    }\n    \n    //Post\n    post(content, url) { \n\t\treturn this.httpClient\n\t\t\t.fetch(url, {\n\t\t\t\tmethod: 'post', // tell server this is a post\n\t\t\t\tbody: json(content) \n\t\t\t})\n\t\t\t.then(response => response.json()) // wait for response\n\t\t\t.then(object => {\n\t\t\t\treturn object; // send response back up\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn error;\n\t\t\t});\n\t}\n\n    //Put\n    put(content, url) {\n\t\treturn this.httpClient\n\t\t\t.fetch(url, {\n\t\t\t\tmethod: 'put',\n\t\t\t\tbody: json(content)\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(object => {\n\t\t\t\treturn object;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn error;\n\t\t\t});\n\t}\n\n\n    //Delete\n    delete(url) {\n\t\treturn this.httpClient\n\t\t\t.fetch(url, {\n\t\t\t\tmethod: 'delete'\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(object => {\n\t\t\t\treturn object;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn error ;\n\t\t\t});\n\t}\n\n}\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './data-services';\r\n\r\n@inject(DataServices)\r\nexport class ToDos {\r\n\r\n\tconstructor(data) {\r\n        \t\tthis.data = data;\r\n        \t\tthis.TODO_SERVICE = 'todos';\r\n   \t\t }\r\n\r\n    async save(todo){\r\n        if(todo){\r\n            let serverResponse = await this.data.post(user, this.TODO_SERVICE);\r\n            return serverResponse;\r\n                }\r\n        }\r\n    \r\n}\r\n","import {inject} from 'aurelia-framework';\nimport {DataServices} from './data-services';\n\n@inject(DataServices)\nexport class Users {\n\n    constructor(data) {\n        this.data = data;\n\n        this.USER_SERVICE = 'users';\n  }\n\n//Save a User\nasync save(user){\n    if(user){\n            let serverResponse = await this.data.post(user, this.USER_SERVICE);\n            return serverResponse;\n\n    }\n}\n\n}\n\n"],"sourceRoot":".."}